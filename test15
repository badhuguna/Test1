import { fireEvent, render, screen } from '@leagueplatform/test-util';
import { describe, expect, vi } from 'vitest';
import React from 'react';
import { ExaminerDispenserInformation } from '../../components/forms/forms-type/directreimbursement/pages/examinerDispenser-information.component';

describe('ExaminerDispenserInformation', () => {
  const errorHandling = vi.fn();
  const isValidateForm = vi.fn();
  const footerToBottom = () => {};

  test('should validate phone number format', () => {
    render(
      <ExaminerDispenserInformation
        errorHandling={errorHandling}
        nextButtonClicked
        isValidateForm={isValidateForm}
        footerToBottom={footerToBottom}
      />,
    );
    const phoneInput = screen.getByLabelText(
      /phone number/i,
    ) as HTMLInputElement;

    fireEvent.change(phoneInput, { target: { value: '(123) 456-7890' } });
    expect(phoneInput.value).toEqual('(123) 456-7890'); // Expected format
  });
  test('should render all form fields', () => {
    render(
      <ExaminerDispenserInformation
        errorHandling={errorHandling}
        nextButtonClicked
        isValidateForm={isValidateForm}
        footerToBottom={footerToBottom}
      />,
    );

    // Check examiner fields
    expect(screen.getByLabelText(/examiner name/i)).toBeInTheDocument();
    expect(
      screen.getByLabelText(/examiner address line 1/i),
    ).toBeInTheDocument();
    expect(screen.getByLabelText(/city/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/phone number/i)).toBeInTheDocument();
    const redioBtn = screen.getByLabelText('No');
    fireEvent.click(redioBtn);
    // Check dispenser fields
    expect(screen.getByLabelText(/dispenser name/i)).toBeInTheDocument();
    expect(
      screen.getByLabelText(/dispenser address line 1/i),
    ).toBeInTheDocument();
    expect(screen.getAllByText(/city/i)).toHaveLength(4);
  });

  test('should update state on input change', () => {
    render(
      <ExaminerDispenserInformation
        errorHandling={errorHandling}
        nextButtonClicked
        isValidateForm={isValidateForm}
        footerToBottom={footerToBottom}
      />,
    );
    const examinerNameInput = screen.getByLabelText(
      'Examiner Name (First, MI, Last)',
    ) as HTMLInputElement;

    fireEvent.change(examinerNameInput, { target: { value: 'John Doe' } });
    expect(examinerNameInput.value).toBe('John Doe');
  });

  test('should call errorHandling when form has invalid fields', () => {
    render(
      <ExaminerDispenserInformation
        errorHandling={errorHandling}
        nextButtonClicked
        isValidateForm={isValidateForm}
        footerToBottom={footerToBottom}
      />,
    );
    const examinerNameInput = screen.getByLabelText(
      'Examiner Name (First, MI, Last)',
    ) as HTMLInputElement;

    fireEvent.change(examinerNameInput, { target: { value: '' } }); // Empty name triggers error
    fireEvent.keyUp(examinerNameInput);
    expect(errorHandling).toHaveBeenCalledWith(false);
  });
});

