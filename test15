import { render, fireEvent, screen } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { ExaminerDispenserInformation } from './examinerDispenser-information.component';

describe('ExaminerDispenserInformation', () => {
  const defaultProps = {
    errorHandling: vi.fn(),
    nextButtonClicked: false,
    isValidateForm: vi.fn(),
    footerToBottom: vi.fn(),
  };

  it('should render all form fields', () => {
    render(<ExaminerDispenserInformation {...defaultProps} />);

    // Check examiner fields
    expect(screen.getByLabelText(/examiner name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/examiner address line 1/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/examiner city/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/examiner phone number/i)).toBeInTheDocument();

    // Check dispenser fields
    expect(screen.getByLabelText(/dispenser name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/dispenser address line 1/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/dispenser city/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/dispenser phone number/i)).toBeInTheDocument();
  });

  it('should update state on input change', () => {
    render(<ExaminerDispenserInformation {...defaultProps} />);
    const examinerNameInput = screen.getByLabelText(/examiner name/i);
    
    fireEvent.change(examinerNameInput, { target: { value: 'John Doe' } });
    expect(examinerNameInput.value).toBe('John Doe');
  });

  it('should call errorHandling when form has invalid fields', () => {
    render(<ExaminerDispenserInformation {...defaultProps} />);
    const examinerNameInput = screen.getByLabelText(/examiner name/i);

    fireEvent.change(examinerNameInput, { target: { value: '' } }); // Empty name triggers error
    expect(defaultProps.errorHandling).toHaveBeenCalledWith(true);
  });

  it('should validate phone number format', () => {
    render(<ExaminerDispenserInformation {...defaultProps} />);
    const phoneInput = screen.getByLabelText(/examiner phone number/i);

    fireEvent.change(phoneInput, { target: { value: '1234567890' } });
    expect(phoneInput.value).toMatch(/^\d{3}-\d{3}-\d{4}$/); // Expected format
  });
});
