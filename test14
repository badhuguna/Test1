import React from 'react';
import { fireEvent, render, screen } from '@leagueplatform/test-util';
import { vi } from 'vitest';
import { ServiceInformation } from '../../components/forms/forms-type/directreimbursement/pages/service-information.component';

describe('ServiceInformation Component', () => {
  const errorHandling = vi.fn();
  const isValidateForm = vi.fn();
  const footerToBottom = () => {};
  const setIsAttaachmentLoading = vi.fn();
  beforeEach(() => {
    // Reset any state or mock data if needed before each test
    vi.clearAllMocks();
  });

  test('renders component with initial fields', () => {
    render(
      <ServiceInformation
        errorHandling={errorHandling}
        nextButtonClicked
        isValidateForm={isValidateForm}
        footerToBottom={footerToBottom}
        setIsAttaachmentLoading={setIsAttaachmentLoading}
      />,
    );

    expect(
      screen.getByText('Direct Reimbursement Claim Form'),
    ).toBeInTheDocument();
    expect(screen.getByText('Step 3: Service Information')).toBeInTheDocument();
    expect(screen.getByLabelText('Total Expenses')).toHaveValue('$0.00');
  });
  test('should add a service when "Add Another Service" button is clicked', () => {
    render(
      <ServiceInformation
        errorHandling={errorHandling}
        nextButtonClicked
        isValidateForm={isValidateForm}
        footerToBottom={footerToBottom}
        setIsAttaachmentLoading={setIsAttaachmentLoading}
      />,
    );

    // Click the "Add Another Service" button
    fireEvent.click(screen.getByText('Add Another Service'));

    // Verify that another service is added by checking the presence of the new label
    expect(screen.getAllByText(/Service \d+/)).toHaveLength(2);
  });

  test('should remove a service when "Remove" button is clicked', () => {
    render(
      <ServiceInformation
        errorHandling={errorHandling}
        nextButtonClicked
        isValidateForm={isValidateForm}
        footerToBottom={footerToBottom}
        setIsAttaachmentLoading={setIsAttaachmentLoading}
      />,
    );

    // Add two services to be able to test removal
    fireEvent.click(screen.getByText('Add Another Service'));
    fireEvent.click(screen.getByText('Add Another Service'));

    // Remove the second service
    const removeButtons = screen.getAllByRole('button', { name: /remove/i });
    fireEvent.click(removeButtons[0]);

    // Assert that only one service remains
    expect(screen.getAllByText(/Service \d+/)).toHaveLength(4); // One remaining + Total Expenses
  });

  test('should update error state when nextButtonClicked is true and form is invalid', () => {
    render(
      <ServiceInformation
        errorHandling={errorHandling}
        nextButtonClicked
        isValidateForm={isValidateForm}
        footerToBottom={footerToBottom}
        setIsAttaachmentLoading={setIsAttaachmentLoading}
      />,
    );

    // Update the form state to be invalid
    fireEvent.click(screen.getByText('Add Another Service'));
    fireEvent.click(screen.getByText('Add Another Service'));

    // Check that error handling has been triggered
    expect(errorHandling).toHaveBeenCalledWith(false);
  });

  // it('should disable the "Add Another Service" button after 10 services', () => {
  //   render(<ServiceInformation {...defaultProps} />);

  //   // Click to add services until limit is reached
  //   for (let i = 0; i < 9; i++) {
  //     fireEvent.click(screen.getByText('Add Another Service'));
  //   }

  //   // Check that "Add Another Service" button is no longer present
  //   expect(screen.queryByText('Add Another Service')).not.toBeInTheDocument();
  // });
});
// test('Chceking Heading of Form policy holder the patient', () => {
//   const mockSessionStorageData = JSON.stringify({
//       isPolicyHolderPatient: 'NO',
//       patientRelationship: 'Self',
//       patientName: 'John Doe',
//       patientDateOfBirth: '1990-01-01',
//       dependents: [
//           {
//             firstName: 'KATHLEEN',
//             lastName: 'RICHARD',
//             gender: 'F',
//             dateOfBirth: '1972-01-01',
//             pin: '029',
//             relationship: 'Spouse',
//             ecId: '799990109',
//           },
//           {
//             firstName: 'KIMBERLY',
//             lastName: 'RICHARD',
//             gender: 'F',
//             dateOfBirth: '2008-11-06',
//             pin: '032',
//             relationship: 'Dependent',
//             ecId: '799990112',
//           },
//           {
//             firstName: 'KENNETH',
//             lastName: 'RICHARD',
//             gender: 'M',
//             dateOfBirth: '2012-01-01',
//             pin: '033',
//             relationship: 'Dependent',
//             ecId: '799990113',
//           },
//           {
//             firstName: 'KATHERINA',
//             lastName: 'RICHARD',
//             gender: 'F',
//             dateOfBirth: '2000-01-01',
//             pin: '030',
//             relationship: 'Dependent',
//             ecId: '799990110',
//           },
//           {
//             firstName: 'KORY',
//             lastName: 'RICHARD',
//             gender: 'M',
//             dateOfBirth: '2004-10-06',
//             pin: '031',
//             relationship: 'Dependent',
//             ecId: '799990111',
//           },
//         ],
//     });

//     // Mock the sessionStorage getItem method
//     vi.spyOn(window.sessionStorage, 'getItem').mockReturnValue(mockSessionStorageData);
//   render(
//     <PatientInformation
//       errorHandling={errorHandling}
//       nextButtonClicked
//       footerToBottom={footerToBottom}
//       profileResponseData={profileResponseData}
//       isValidateForm={true}
//     />,
//   );
//   const heading = screen.queryByText('Step 2: Patient Information');
//   expect(heading).toBeInTheDocument();
// });

