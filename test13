import React from 'react';
import { render, screen } from '@leagueplatform/test-util';
import { expect, vi } from 'vitest';
import { PatientInformation } from '../../components/forms/forms-type/directreimbursement/pages/patient-information.component';
import { profileResponseData } from '../../mockData';

const footerToBottom = () => {};
const errorHandling = () => {};

describe('Checking Form Patient Information', () => {
  test('Chceking Heading of Form Patient Information', () => {
    const mockSessionStorageData = JSON.stringify({
      isPolicyHolderPatient: 'YES',
      patientRelationship: 'Self',
      patientName: 'John Doe',
      patientDateOfBirth: '1990-01-01',
      dependents: [{ name: 'Dependent 1' }, { name: 'Dependent 2' }],
    });

    // Mock the sessionStorage getItem method
    vi.spyOn(window.sessionStorage, 'getItem').mockReturnValue(
      mockSessionStorageData,
    );
    render(
      <PatientInformation
        errorHandling={errorHandling}
        nextButtonClicked
        footerToBottom={footerToBottom}
        profileResponseData={profileResponseData}
        isValidateForm
      />,
    );
    const heading = screen.queryByText('Step 2: Patient Information');
    expect(heading).toBeInTheDocument();
  });
  test('Chceking Heading of Form policy holder the patient', () => {
    const mockSessionStorageData = JSON.stringify({
      isPolicyHolderPatient: 'NO',
      patientRelationship: 'Self',
      patientName: 'John Doe',
      patientDateOfBirth: '1990-01-01',
      dependents: [
        {
          firstName: 'KATHLEEN',
          lastName: 'RICHARD',
          gender: 'F',
          dateOfBirth: '1972-01-01',
          pin: '029',
          relationship: 'Spouse',
          ecId: '799990109',
        },
        {
          firstName: 'KIMBERLY',
          lastName: 'RICHARD',
          gender: 'F',
          dateOfBirth: '2008-11-06',
          pin: '032',
          relationship: 'Dependent',
          ecId: '799990112',
        },
        {
          firstName: 'KENNETH',
          lastName: 'RICHARD',
          gender: 'M',
          dateOfBirth: '2012-01-01',
          pin: '033',
          relationship: 'Dependent',
          ecId: '799990113',
        },
        {
          firstName: 'KATHERINA',
          lastName: 'RICHARD',
          gender: 'F',
          dateOfBirth: '2000-01-01',
          pin: '030',
          relationship: 'Dependent',
          ecId: '799990110',
        },
        {
          firstName: 'KORY',
          lastName: 'RICHARD',
          gender: 'M',
          dateOfBirth: '2004-10-06',
          pin: '031',
          relationship: 'Dependent',
          ecId: '799990111',
        },
      ],
    });

    // Mock the sessionStorage getItem method
    vi.spyOn(window.sessionStorage, 'getItem').mockReturnValue(
      mockSessionStorageData,
    );
    render(
      <PatientInformation
        errorHandling={errorHandling}
        nextButtonClicked
        footerToBottom={footerToBottom}
        profileResponseData={profileResponseData}
        isValidateForm
      />,
    );
    const heading = screen.queryByText('Step 2: Patient Information');
    expect(heading).toBeInTheDocument();
  });
});

